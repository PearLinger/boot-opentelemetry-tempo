<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.opentelemetry.example</groupId>
		<artifactId>boot-opentelemetry-tempo</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>boot-otel-tempo-api</artifactId>
	
	<name>boot-otel-tempo-api</name>
	<description>Project demonstrating OpenTelemetry Instrumentation : api</description>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
			<scope>runtime</scope>
		</dependency>
		


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.elegoo.cloud</groupId>
			<artifactId>elegoo-spring-boot-starter-rpc</artifactId>
		</dependency>

		<dependency>
			<groupId>com.elegoo.cloud</groupId>
			<artifactId>elegoo-spring-boot-starter-env</artifactId>
		</dependency>

		<dependency>
			<groupId>com.elegoo.cloud</groupId>
			<artifactId>elegoo-spring-boot-starter-monitor</artifactId>
		</dependency>

		<dependency>
			<groupId>io.opentelemetry.example</groupId>
			<artifactId>boot-otel-tempo-feign-client</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.xuxueli</groupId>
			<artifactId>xxl-job-core</artifactId>
			<version>2.4.0</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<goals>
							<!-- 必须添加此目标，否则无法生成可执行JAR -->
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
<!-- docker打包				<configuration>-->
<!--					<fork>true</fork>-->
<!--      				<skip>false</skip>-->
<!--					<mainClass>io.opentelemetry.example.BootOtelTempoApiApplication</mainClass>-->
<!--	                <argLine>-->
<!--	                    -javaagent:../boot-otel-tempo-docker/agent/opentelemetry-javaagent-${opentelemetry-agent.version}.jar-->
<!--										&lt;!&ndash; 2. 核心：启用 OTLP Exporter（替代原 Jaeger Exporter） &ndash;&gt;-->
<!--										  -Dotel.traces.exporter=otlp-->
<!--										&lt;!&ndash; 3. 修正：Tempo 的 OTLP HTTP 端点（服务名+4318端口，容器环境必须用服务名“tempo”） &ndash;&gt;-->
<!--									  	-Dotel.exporter.otlp.endpoint=http://tempo:4317-->
<!--										  -Dotel.exporter.otlp.protocol=grpc-->
<!--	                    -Dotel.resource.attributes=service.name=${project.artifactId} -->
<!--	                    -Dotel.javaagent.debug=false -->
<!--	                    -Dotel.metrics.exporter=none-->
<!--	                </argLine>-->
<!--	            </configuration>-->
			</plugin>
<!--			<plugin>-->
<!--			    <groupId>io.fabric8</groupId>-->
<!--			    <artifactId>docker-maven-plugin</artifactId>-->
<!--				<executions>-->
<!--		             <execution>-->
<!--		                 <id>start</id>-->
<!--		                 <phase>pre-integration-test</phase>-->
<!--		                 <goals>-->
<!--		                     <goal>build</goal>-->
<!--		                     <goal>start</goal>-->
<!--		                 </goals>-->
<!--		             </execution>-->
<!--		             <execution>-->
<!--		                 <id>stop</id>-->
<!--		                 <phase>post-integration-test</phase>-->
<!--		                 <goals>-->
<!--		                     <goal>stop</goal>-->
<!--		                 </goals>-->
<!--		             </execution>-->
<!--		         </executions>-->
<!--			    <configuration>-->
<!--			        <images>-->
<!--			            <image>	-->
<!--			            	<name>mnadeem/${project.artifactId}:${project.version}</name>		-->
<!--			                <build>-->
<!--			                    <dockerFile>${project.basedir}/Dockerfile</dockerFile>-->
<!--			                </build>-->
<!--			            </image>			-->
<!--			        </images>		        -->
<!--			    </configuration>-->
<!--			</plugin>			-->
		</plugins>
	</build>

</project>
