spring:
  application:
    name: boot-otel-tempo-provider1
  profiles:
    active: local
  config:
    import:
      - optional:classpath:application-${spring.profiles.active}.yaml # 加载【本地】配置
      - optional:nacos:${spring.application.name}-${spring.profiles.active}.yaml # 加载【Nacos】的配置
elegoo:
  env:
    tag: dev
server:
  port: 8090


# 数据库配置
provider1:
  datasource:
    url: ${PROVIDER1_DB_URL}
    username: ${PROVIDER1_DB_USER}
    password: ${PROVIDER1_DB_PASS}
    driver-class-name: org.postgresql.Driver
    hikari:
      connectionTimeout: 20000
      maximumPoolSize: 5
      # connection-test-query: SELECT 1  # 注释掉的配置
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

# JMX管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,info,metric  # 覆盖默认的*，只包含指定端点
  health:
    probes:
      enabled: true
    show-details: always

# 日志配置
logging:
  level:
    io.opentelemetry: DEBUG
    web: INFO
    root: INFO
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr([${spring.application.name},%X{trace_id},%X{span_id}]) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m %n%wEx"
    file: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr([${spring.application.name},%X{trace_id},%X{span_id}]) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m %n%wEx"
  file:
    name: /app/logs/${spring.application.name}.log
    max-size: 10MB
    max-history: 1
    clean-history-on-start: true
